import {useState} from "react";

type TalentNode = {
    id: string;
    name: string;
    icon: string;
    description: string;
    unlocked: boolean;
    requires: string[];
    position: { x: number; y: number };
    maxRank: number;
    currentRank: number;
};

type TalentTree = {
    id: string;
    name: string;
    nodes: TalentNode[];
};

type TalentCategory = {
    id: string;
    name: string;
    trees: TalentTree[];
};

const TalentWindow: React.FC = () => {
    // –î–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤
    const [categories] = useState<TalentCategory[]>([
        {
            id: 'combat',
            name: '–ë–æ–µ–≤—ã–µ',
            trees: [
                {
                    id: 'warrior',
                    name: '–í–æ–∏–Ω',
                    nodes: [
                        {
                            id: 'w1',
                            name: '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä',
                            icon: '‚öîÔ∏è',
                            description: '–ù–∞–Ω–æ—Å–∏—Ç 150% —É—Ä–æ–Ω–∞ –æ–¥–Ω–æ–π —Ü–µ–ª–∏',
                            unlocked: true,
                            requires: [],
                            position: { x: 1, y: 1 },
                            maxRank: 5,
                            currentRank: 3
                        },
                        {
                            id: 'w2',
                            name: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
                            icon: 'üõ°Ô∏è',
                            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å',
                            unlocked: true,
                            requires: [],
                            position: { x: 3, y: 1 },
                            maxRank: 3,
                            currentRank: 2
                        },
                        {
                            id: 'w3',
                            name: '–†–∞—Å—Å–µ—á–µ–Ω–∏–µ',
                            icon: 'üó°Ô∏è',
                            description: '–ê—Ç–∞–∫–∞ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–æ –æ–±–ª–∞—Å—Ç–∏',
                            unlocked: true,
                            requires: ['w1'],
                            position: { x: 1, y: 2 },
                            maxRank: 3,
                            currentRank: 1
                        },
                        {
                            id: 'w4',
                            name: '–ë–µ—Ä—Å–µ—Ä–∫',
                            icon: 'üî•',
                            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –Ω–∞ 20%',
                            unlocked: false,
                            requires: ['w1', 'w3'],
                            position: { x: 1, y: 3 },
                            maxRank: 1,
                            currentRank: 0
                        },
                        {
                            id: 'w5',
                            name: '–°—Ç–∞–ª—å–Ω–∞—è –∫–æ–∂–∞',
                            icon: 'üîí',
                            description: '–£–º–µ–Ω—å—à–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω –Ω–∞ 10%',
                            unlocked: false,
                            requires: ['w2'],
                            position: { x: 3, y: 2 },
                            maxRank: 2,
                            currentRank: 0
                        },
                    ]
                },
                {
                    id: 'archer',
                    name: '–õ—É—á–Ω–∏–∫',
                    nodes: [
                        {
                            id: 'a1',
                            name: '–ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª',
                            icon: 'üèπ',
                            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ –Ω–∞ 5%',
                            unlocked: true,
                            requires: [],
                            position: { x: 2, y: 1 },
                            maxRank: 3,
                            currentRank: 2
                        },
                        {
                            id: 'a2',
                            name: '–ë—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä–µ–ª—å–±–∞',
                            icon: '‚ö°',
                            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –Ω–∞ 10%',
                            unlocked: true,
                            requires: [],
                            position: { x: 4, y: 1 },
                            maxRank: 2,
                            currentRank: 1
                        },
                        {
                            id: 'a3',
                            name: '–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–µ–ª—ã',
                            icon: '‚ò†Ô∏è',
                            description: '–°—Ç—Ä–µ–ª—ã –Ω–∞–Ω–æ—Å—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω —è–¥–æ–º',
                            unlocked: false,
                            requires: ['a1'],
                            position: { x: 2, y: 2 },
                            maxRank: 3,
                            currentRank: 0
                        },
                    ]
                },
                {
                    id: 'assassin',
                    name: '–ê—Å—Å–∞—Å–∏–Ω',
                    nodes: [
                        {
                            id: 's1',
                            name: '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å',
                            icon: 'üëÅÔ∏è',
                            description: '–£–º–µ–Ω—å—à–∞–µ—Ç —à–∞–Ω—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è',
                            unlocked: true,
                            requires: [],
                            position: { x: 3, y: 1 },
                            maxRank: 3,
                            currentRank: 1
                        },
                    ]
                }
            ]
        },
        {
            id: 'magic',
            name: '–ú–∞–≥–∏—è',
            trees: [
                {
                    id: 'fire',
                    name: '–û–≥–æ–Ω—å',
                    nodes: [
                        {
                            id: 'f1',
                            name: '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä',
                            icon: 'üî•',
                            description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω',
                            unlocked: true,
                            requires: [],
                            position: { x: 2, y: 1 },
                            maxRank: 5,
                            currentRank: 3
                        },
                        {
                            id: 'f2',
                            name: '–û–±–∂–∏–≥–∞—é—â–∏–π —â–∏—Ç',
                            icon: 'üõ°Ô∏è',
                            description: '–ó–∞—â–∏—Ç–Ω—ã–π —â–∏—Ç, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω –≤—Ä–∞–≥–∞–º',
                            unlocked: true,
                            requires: [],
                            position: { x: 4, y: 1 },
                            maxRank: 3,
                            currentRank: 1
                        },
                        {
                            id: 'f3',
                            name: '–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤',
                            icon: 'üí•',
                            description: '–í–∑—Ä—ã–≤, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω –ø–æ –æ–±–ª–∞—Å—Ç–∏',
                            unlocked: false,
                            requires: ['f1'],
                            position: { x: 2, y: 2 },
                            maxRank: 3,
                            currentRank: 0
                        },
                    ]
                },
                {
                    id: 'ice',
                    name: '–õ—ë–¥',
                    nodes: [
                        {
                            id: 'i1',
                            name: '–õ–µ–¥—è–Ω–∞—è —Å—Ç—Ä–µ–ª–∞',
                            icon: '‚ùÑÔ∏è',
                            description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–µ–¥—è–Ω—É—é —Å—Ç—Ä–µ–ª—É, –∑–∞–º–µ–¥–ª—è—é—â—É—é —Ü–µ–ª—å',
                            unlocked: true,
                            requires: [],
                            position: { x: 3, y: 1 },
                            maxRank: 3,
                            currentRank: 2
                        },
                    ]
                },
                {
                    id: 'lightning',
                    name: '–ú–æ–ª–Ω–∏—è',
                    nodes: [
                        {
                            id: 'l1',
                            name: '–†–∞–∑—Ä—è–¥ –º–æ–ª–Ω–∏–∏',
                            icon: '‚ö°',
                            description: '–ü–æ—Ä–∞–∂–∞–µ—Ç —Ü–µ–ª—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º —Ä–∞–∑—Ä—è–¥–æ–º',
                            unlocked: true,
                            requires: [],
                            position: { x: 2, y: 1 },
                            maxRank: 3,
                            currentRank: 1
                        },
                    ]
                },
                {
                    id: 'nature',
                    name: '–ü—Ä–∏—Ä–æ–¥–∞',
                    nodes: [
                        {
                            id: 'n1',
                            name: '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
                            icon: 'üåø',
                            description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–∏',
                            unlocked: true,
                            requires: [],
                            position: { x: 2, y: 1 },
                            maxRank: 5,
                            currentRank: 3
                        },
                    ]
                }
            ]
        }
    ]);

    const [activeCategory, setActiveCategory] = useState(categories[0].id);
    const [activeTree, setActiveTree] = useState(categories[0].trees[0].id);

    const currentCategory = categories.find(c => c.id === activeCategory)!;
    const currentTree = currentCategory.trees.find(t => t.id === activeTree)!;

    const drawArrow = (from: TalentNode, to: TalentNode) => {
        const fromX = from.position.x * 80 + 40;
        const fromY = from.position.y * 80 + 40;
        const toX = to.position.x * 80 + 40;
        const toY = to.position.y * 80 + 40;

        return (
            <line
                x1={fromX}
                y1={fromY}
                x2={toX}
                y2={toY}
                stroke={from.currentRank > 0 ? "#4CAF50" : "#555"}
                strokeWidth="2"
            />
        );
    };

    const increaseRank = (nodeId: string) => {
        const updatedCategories = categories.map(category => ({
            ...category,
            trees: category.trees.map(tree => ({
                ...tree,
                nodes: tree.nodes.map(node =>
                    node.id === nodeId && node.currentRank < node.maxRank ?
                        { ...node, currentRank: node.currentRank + 1 } :
                        node
                )
            }))
        }));

        // –û–±—ã—á–Ω–æ —Ç—É—Ç –±—ã–ª –±—ã setState, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –º—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    const decreaseRank = (nodeId: string) => {
        const updatedCategories = categories.map(category => ({
            ...category,
            trees: category.trees.map(tree => ({
                ...tree,
                nodes: tree.nodes.map(node =>
                    node.id === nodeId && node.currentRank > 0 ?
                        { ...node, currentRank: node.currentRank - 1 } :
                        node
                )
            }))
        }));

        // –û–±—ã—á–Ω–æ —Ç—É—Ç –±—ã–ª –±—ã setState, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –º—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    const [selectedNode, setSelectedNode] = useState<TalentNode | null>(null);

    return (
        <div className="w-full max-w-4xl bg-gray-800 text-white rounded-lg shadow-lg flex flex-col h-96">
            {/* –í–µ—Ä—Ö–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) */}
            <div className="flex border-b border-gray-700">
                {categories.map(category => (
                    <Tab
                        key={category.id}
                        title={category.name}
                        isActive={activeCategory === category.id}
                        onClick={() => {
                            setActiveCategory(category.id);
                            setActiveTree(category.trees[0].id);
                            setSelectedNode(null);
                        }}
                    />
                ))}
                <div className="ml-auto p-2">
                    <X size={16} />
                </div>
            </div>

            <div className="flex flex-grow">
                {/* –ë–æ–∫–æ–≤—ã–µ –≤–∫–ª–∞–¥–∫–∏ (–¥–µ—Ä–µ–≤—å—è) */}
                <div className="w-28 bg-gray-900 border-r border-gray-700">
                    {currentCategory.trees.map(tree => (
                        <div
                            key={tree.id}
                            className={`p-3 text-center cursor-pointer ${activeTree === tree.id ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
                            onClick={() => {
                                setActiveTree(tree.id);
                                setSelectedNode(null);
                            }}
                        >
                            {tree.name}
                        </div>
                    ))}
                </div>

                {/* –î–µ—Ä–µ–≤–æ —Ç–∞–ª–∞–Ω—Ç–æ–≤ */}
                <div className="flex-grow relative p-4 overflow-auto">
                    <svg width="100%" height="100%" className="absolute top-0 left-0">
                        {currentTree.nodes.map(node =>
                            node.requires.map(reqId => {
                                const requiredNode = currentTree.nodes.find(n => n.id === reqId);
                                if (requiredNode) {
                                    return <React.Fragment key={`${node.id}-${reqId}`}>
                                        {drawArrow(requiredNode, node)}
                                    </React.Fragment>;
                                }
                                return null;
                            })
                        )}
                    </svg>

                    <div className="relative">
                        {currentTree.nodes.map(node => (
                            <div
                                key={node.id}
                                className={`absolute w-16 h-16 rounded-full flex items-center justify-center cursor-pointer
                  ${node.unlocked ? (node.currentRank > 0 ? 'bg-green-700' : 'bg-gray-700') : 'bg-gray-900 opacity-50'}`}
                                style={{
                                    left: `${node.position.x * 80}px`,
                                    top: `${node.position.y * 80}px`
                                }}
                                onClick={() => setSelectedNode(node)}
                            >
                                <div className="text-2xl">{node.icon}</div>
                                <div className="absolute bottom-0 right-0 bg-gray-900 rounded-full w-6 h-6 flex items-center justify-center">
                                    {node.currentRank}/{node.maxRank}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                {/* –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–ª–∞–Ω—Ç–∞ */}
                {selectedNode && (
                    <div className="w-64 bg-gray-900 border-l border-gray-700 p-4">
                        <div className="font-bold text-lg mb-2">{selectedNode.name}</div>
                        <div className="flex items-center mb-4">
                            <div className="text-2xl mr-2">{selectedNode.icon}</div>
                            <div>
                                –†–∞–Ω–≥: {selectedNode.currentRank}/{selectedNode.maxRank}
                            </div>
                        </div>

                        <div className="text-sm mb-4">
                            {selectedNode.description}
                        </div>

                        <div className="flex justify-between">
                            <button
                                className={`px-4 py-1 rounded ${
                                    selectedNode.currentRank > 0 ? 'bg-red-700 hover:bg-red-600' : 'bg-gray-700 cursor-not-allowed'
                                }`}
                                onClick={() => decreaseRank(selectedNode.id)}
                                disabled={selectedNode.currentRank === 0}
                            >
                                -
                            </button>
                            <button
                                className={`px-4 py-1 rounded ${
                                    selectedNode.currentRank < selectedNode.maxRank && selectedNode.unlocked ?
                                        'bg-green-700 hover:bg-green-600' : 'bg-gray-700 cursor-not-allowed'
                                }`}
                                onClick={() => increaseRank(selectedNode.id)}
                                disabled={selectedNode.currentRank === selectedNode.maxRank || !selectedNode.unlocked}
                            >
                                +
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default TalentWindow;