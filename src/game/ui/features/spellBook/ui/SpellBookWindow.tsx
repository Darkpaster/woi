// components/SpellBookWindow.tsx
import React, { useEffect, useState } from "react";
import { useMyDispatch } from "../../../../../utils/stateManagement/store.ts";
import { player } from "../../../../core/main.ts";
import { Skill } from "../../../../core/logic/skills/skill";
import { setInfoEntity, setInfoPosition } from "../../../../../utils/stateManagement/uiSlice.ts";
import Icon from "../../../shared/ui/Icon.tsx";
import "../styles/spellBook.scss";

type SpellType = 'active' | 'passive';

interface SpellBookWindowProps {
    onSpellDragToPanel?: (skill: Skill) => void;
}

const SpellBookWindow: React.FC<SpellBookWindowProps> = ({ onSpellDragToPanel }) => {
    const [activeTab, setActiveTab] = useState<SpellType>('active');
    const [allSkills, setAllSkills] = useState<Skill[]>([]);
    const [draggedSkill, setDraggedSkill] = useState<Skill | null>(null);

    const dispatch = useMyDispatch();

    useEffect(() => {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–≥—Ä–æ–∫–∞
        const interval = setInterval(() => {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ allSkills –∏–ª–∏ skills
            // –ï—Å–ª–∏ –Ω–µ—Ç, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if (player?.inventory.find(skill => !!skill)) {
                setAllSkills([...player.spellBook.filter(skill => !!skill)]);
            }
        }, 200);
        return () => clearInterval(interval);
    }, []);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ —Ç–∏–ø—É
    const getFilteredSkills = (): Skill[] => {
        return allSkills.filter(skill => {
            if (activeTab === 'active') {
                return skill.type === 'active' || !skill.type; // –µ—Å–ª–∏ type –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
            } else {
                return skill.type === 'passive';
            }
        });
    };

    const handleDragStart = (e: React.DragEvent, skill: Skill) => {
        e.dataTransfer.setData("text/plain", skill.name);
        e.dataTransfer.setData("skill-data", JSON.stringify({
            name: skill.name,
            source: 'spellbook'
        }));
        e.dataTransfer.effectAllowed = "copy";
        setDraggedSkill(skill);
    };

    const handleDragEnd = () => {
        setDraggedSkill(null);
    };

    const handleMouseEnter = (e: React.MouseEvent, skill: Skill) => {
        const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();
        dispatch(setInfoPosition({ left: rect.x, top: rect.y }));
        dispatch(setInfoEntity({
            name: skill.name,
            description: skill.description,
            minDamage: skill.minDamage,
            maxDamage: skill.maxDamage,
            icon: skill.icon,
            cooldown: skill.cooldown,
            rarity: skill.rarity || "common",
            level: skill.level || 1,
            note: `–£—Ä–æ–≤–µ–Ω—å: ${skill.level || 1}`
        }));
    };

    const handleMouseLeave = () => {
        dispatch(setInfoEntity(null));
        dispatch(setInfoPosition(null));
    };

    const getSkillRarityColor = (skill: Skill): string => {
        switch (skill.rarity) {
            case 'common':
                return 'grey';
            case 'uncommon':
                return 'green';
            case 'rare':
                return 'blue';
            case 'epic':
                return 'violet';
            case 'legendary':
                return 'orange';
            case 'godlike':
                return 'red';
            default:
                return 'black';
        }
    };

    const getSkillAvailability = (skill: Skill): boolean => {
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–≤—ã–∫–∞
        // –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞, –≤—ã—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç.–¥.
        return skill.name.length > 4;
    };

    const filteredSkills = getFilteredSkills();

    return (
        <div className="spellbook-window ui-border ui-div">
            <div className="spellbook-header">
                <h2>–ö–Ω–∏–≥–∞ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–π</h2>
                <div className="spellbook-tabs">
                    <button
                        className={`tab-button ${activeTab === 'active' ? 'active' : ''}`}
                        onClick={() => setActiveTab('active')}
                    >
                        –ê–∫—Ç–∏–≤–Ω—ã–µ
                    </button>
                    <button
                        className={`tab-button ${activeTab === 'passive' ? 'active' : ''}`}
                        onClick={() => setActiveTab('passive')}
                    >
                        –ü–∞—Å—Å–∏–≤–Ω—ã–µ
                    </button>
                </div>
            </div>

            <div className="spellbook-content">
                <div className="skills-grid">
                    {filteredSkills.map((skill, index) => {
                        const isAvailable = getSkillAvailability(skill);
                        const isDragging = draggedSkill === skill;

                        return (
                            <div
                                key={`${skill.name}-${index}`}
                                className={`skill-slot ${!isAvailable ? 'skill-slot--unavailable' : ''} ${isDragging ? 'skill-slot--dragging' : ''}`}
                                draggable={isAvailable && activeTab === 'active'} // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
                                onDragStart={(e) => handleDragStart(e, skill)}
                                onDragEnd={handleDragEnd}
                                onMouseEnter={(e) => handleMouseEnter(e, skill)}
                                onMouseLeave={handleMouseLeave}
                            >
                                <button
                                    className="cell"
                                    style={{
                                        borderColor: getSkillRarityColor(skill),
                                        borderWidth: "2px",
                                        opacity: isAvailable ? 1 : 0.5,
                                        cursor: isAvailable ? (activeTab === 'active' ? 'grab' : 'default') : 'not-allowed',
                                        padding: 0,
                                    }}
                                    disabled={!isAvailable}
                                >
                                    <Icon
                                        icon={skill.icon}
                                        borderColor={getSkillRarityColor(skill)}
                                        displayText={skill.level ? String(skill.level) : '1'}
                                        fontSize="14px"
                                        textAlign="center"
                                    />

                                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è */}
                                    <div className="skill-level">
                                        {skill.level || 1}
                                    </div>

                                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –Ω–∞–≤—ã–∫–∞ */}
                                    <div className={`skill-type-indicator ${activeTab}`}>
                                        {activeTab === 'active' ? 'A' : 'P'}
                                    </div>

                                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑—É—á–µ–Ω–Ω–æ—Å—Ç–∏ */}
                                    {!isAvailable && (
                                        <div className="skill-locked-overlay">
                                            <span>üîí</span>
                                        </div>
                                    )}
                                </button>

                                <div className="skill-name">
                                    {skill.name}
                                </div>
                            </div>
                        );
                    })}
                </div>

                {filteredSkills.length === 0 && (
                    <div className="empty-state">
                        <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {activeTab === 'active' ? '–∞–∫—Ç–∏–≤–Ω—ã—Ö' : '–ø–∞—Å—Å–∏–≤–Ω—ã—Ö'} –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π</p>
                    </div>
                )}
            </div>

            <div className="spellbook-footer">
                <p className="drag-hint">
                    {activeTab === 'active'
                        ? "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞–≤—ã–∫–æ–≤"
                        : "–ü–∞—Å—Å–∏–≤–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    }
                </p>
            </div>
        </div>
    );
};

export default SpellBookWindow;