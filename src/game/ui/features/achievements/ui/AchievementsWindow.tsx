import React, { useState, useMemo } from 'react';
import { X } from 'lucide-react';
import "../styles/achievementsWindow.scss";
import { Achievement, AchievementRarity, AchievementType } from '../../../../core/logic/achievements/achievement';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ player.achievementList)
const mockAchievements: Achievement[] = [
    // –ë–æ–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    new Achievement({
        id: 'first_kill',
        name: '–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å',
        description: '–£–±–µ–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞',
        icon: '‚öîÔ∏è',
        type: AchievementType.COMBAT,
        rarity: AchievementRarity.COMMON,
        isUnlocked: true,
        unlockedDate: new Date('2024-01-15')
    }),
    new Achievement({
        id: 'slayer',
        name: '–£–±–∏–π—Ü–∞',
        description: '–£–±–µ–π—Ç–µ 100 –≤—Ä–∞–≥–æ–≤',
        icon: 'üíÄ',
        type: AchievementType.COMBAT,
        rarity: AchievementRarity.UNCOMMON,
        isUnlocked: true,
        progress: 100,
        maxProgress: 100,
        unlockedDate: new Date('2024-02-01')
    }),
    new Achievement({
        id: 'boss_hunter',
        name: '–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –±–æ—Å—Å–æ–≤',
        description: '–ü–æ–±–µ–¥–∏—Ç–µ 5 –±–æ—Å—Å–æ–≤',
        icon: 'üêâ',
        type: AchievementType.COMBAT,
        rarity: AchievementRarity.RARE,
        isUnlocked: false,
        progress: 3,
        maxProgress: 5
    }),
    new Achievement({
        id: 'legendary_warrior',
        name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–æ–∏–Ω',
        description: '–ü–æ–±–µ–¥–∏—Ç–µ –≤ 50 —Å—Ä–∞–∂–µ–Ω–∏—è—Ö –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏–π',
        icon: 'üèÜ',
        type: AchievementType.COMBAT,
        rarity: AchievementRarity.LEGENDARY,
        isUnlocked: false,
        progress: 23,
        maxProgress: 50
    }),

    // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    new Achievement({
        id: 'explorer',
        name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
        description: '–û—Ç–∫—Ä–æ–π—Ç–µ 10 –Ω–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π',
        icon: 'üó∫Ô∏è',
        type: AchievementType.EXPLORATION,
        rarity: AchievementRarity.COMMON,
        isUnlocked: true,
        unlockedDate: new Date('2024-01-20')
    }),
    new Achievement({
        id: 'treasure_hunter',
        name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏',
        description: '–ù–∞–π–¥–∏—Ç–µ 25 —Å–∫—Ä—ã—Ç—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤',
        icon: 'üí∞',
        type: AchievementType.EXPLORATION,
        rarity: AchievementRarity.UNCOMMON,
        isUnlocked: false,
        progress: 18,
        maxProgress: 25
    }),
    new Achievement({
        id: 'world_traveler',
        name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        description: '–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—Å–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã',
        icon: 'üåç',
        type: AchievementType.EXPLORATION,
        rarity: AchievementRarity.RARE,
        isUnlocked: false,
        progress: 2,
        maxProgress: 5
    }),

    // –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    new Achievement({
        id: 'collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
        description: '–°–æ–±–µ—Ä–∏—Ç–µ 50 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
        icon: 'üì¶',
        type: AchievementType.COLLECTION,
        rarity: AchievementRarity.COMMON,
        isUnlocked: true,
        unlockedDate: new Date('2024-01-25')
    }),
    new Achievement({
        id: 'rare_collector',
        name: '–¶–µ–Ω–∏—Ç–µ–ª—å —Ä–µ–¥–∫–æ—Å—Ç–µ–π',
        description: '–°–æ–±–µ—Ä–∏—Ç–µ 10 –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
        icon: 'üíé',
        type: AchievementType.COLLECTION,
        rarity: AchievementRarity.ELITE,
        isUnlocked: false,
        progress: 4,
        maxProgress: 10
    }),

    // –°—é–∂–µ—Ç
    new Achievement({
        id: 'story_begin',
        name: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É',
        icon: 'üìñ',
        type: AchievementType.STORY,
        rarity: AchievementRarity.COMMON,
        isUnlocked: true,
        unlockedDate: new Date('2024-01-10')
    }),
    new Achievement({
        id: 'story_complete',
        name: '–ì–µ—Ä–æ–π –ª–µ–≥–µ–Ω–¥',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é',
        icon: 'üëë',
        type: AchievementType.STORY,
        rarity: AchievementRarity.LEGENDARY,
        isUnlocked: false,
        progress: 0,
        maxProgress: 1
    }),

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
    new Achievement({
        id: 'friend',
        name: '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π',
        description: '–î–æ–±–∞–≤—å—Ç–µ 5 –¥—Ä—É–∑–µ–π',
        icon: 'üë•',
        type: AchievementType.SOCIAL,
        rarity: AchievementRarity.COMMON,
        isUnlocked: true,
        unlockedDate: new Date('2024-02-05')
    }),
    new Achievement({
        id: 'guild_master',
        name: '–ú–∞—Å—Ç–µ—Ä –≥–∏–ª—å–¥–∏–∏',
        description: '–°–æ–∑–¥–∞–π—Ç–µ –∏ –≤–æ–∑–≥–ª–∞–≤—å—Ç–µ –≥–∏–ª—å–¥–∏—é',
        icon: 'üè∞',
        type: AchievementType.SOCIAL,
        rarity: AchievementRarity.RARE,
        isUnlocked: false,
        progress: 0,
        maxProgress: 1,
        isHidden: true
    }),

    // –ö—Ä–∞—Ñ—Ç
    new Achievement({
        id: 'crafter',
        name: '–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫',
        description: '–°–æ–∑–¥–∞–π—Ç–µ 20 –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
        icon: 'üî®',
        type: AchievementType.CRAFTING,
        rarity: AchievementRarity.COMMON,
        isUnlocked: true,
        unlockedDate: new Date('2024-02-10')
    }),
    new Achievement({
        id: 'master_crafter',
        name: '–ú–∞—Å—Ç–µ—Ä-—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫',
        description: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞',
        icon: '‚öíÔ∏è',
        type: AchievementType.CRAFTING,
        rarity: AchievementRarity.ELITE,
        isUnlocked: false,
        progress: 6,
        maxProgress: 10
    })
];

type CategoryInfo = {
    id: AchievementType;
    name: string;
    icon: string;
};

const categories: CategoryInfo[] = [
    { id: AchievementType.COMBAT, name: '–ë–æ–µ–≤—ã–µ', icon: '‚öîÔ∏è' },
    { id: AchievementType.EXPLORATION, name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', icon: 'üó∫Ô∏è' },
    { id: AchievementType.COLLECTION, name: '–ö–æ–ª–ª–µ–∫—Ü–∏–∏', icon: 'üì¶' },
    { id: AchievementType.STORY, name: '–°—é–∂–µ—Ç', icon: 'üìñ' },
    { id: AchievementType.SOCIAL, name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', icon: 'üë•' },
    { id: AchievementType.CRAFTING, name: '–†–µ–º–µ—Å–ª–æ', icon: 'üî®' }
];

interface AchievementsWindowProps {
    onClose?: () => void;
}

const AchievementsWindow: React.FC<AchievementsWindowProps> = ({ onClose }) => {
    const [activeCategory, setActiveCategory] = useState<AchievementType>(AchievementType.COMBAT);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç: player.achievementList
    const achievements = mockAchievements;

    const filteredAchievements = useMemo(() => {
        return achievements
            .filter(achievement => achievement.type === activeCategory)
            .filter(achievement => achievement.canBeDisplayed())
            .sort((a, b) => {
                if (a.isUnlocked && !b.isUnlocked) return -1;
                if (!a.isUnlocked && b.isUnlocked) return 1;
                return 0;
            });
    }, [achievements, activeCategory]);

    const stats = useMemo(() => {
        const total = achievements.filter(a => a.canBeDisplayed()).length;
        const unlocked = achievements.filter(a => a.isUnlocked).length;

        const categoryStats = categories.map(category => ({
            ...category,
            count: achievements.filter(a => a.type === category.id && a.isUnlocked).length
        }));

        return { total, unlocked, categoryStats };
    }, [achievements]);

    const formatDate = (date: Date) => {
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    };

    const getRarityClassName = (rarity: AchievementRarity) => {
        return `achievement-card__rarity--${rarity}`;
    };

    const renderProgressBar = (achievement: Achievement) => {
        if (achievement.maxProgress <= 1) return null;

        const percentage = achievement.getProgressPercentage();

        return (
            <div className="achievement-card__progress">
                <div className="progress-bar">
                    <div
                        className="progress-bar__fill"
                        style={{ width: `${percentage}%` }}
                    />
                    <div className="progress-bar__text">
                        {achievement.progress}/{achievement.maxProgress}
                    </div>
                </div>
            </div>
        );
    };

    const renderAchievementCard = (achievement: Achievement) => {
        const cardClass = [
            'achievement-card',
            achievement.isUnlocked ? 'achievement-card--unlocked' : 'achievement-card--locked',
            achievement.isHidden && !achievement.isUnlocked ? 'achievement-card--hidden' : ''
        ].filter(Boolean).join(' ');

        const displayName = achievement.isHidden && !achievement.isUnlocked ? '???' : achievement.name;
        const displayDescription = achievement.isHidden && !achievement.isUnlocked ? '–°–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ' : achievement.description;

        return (
            <div key={achievement.id} className={cardClass}>
                <div className="achievement-card__content">
                    <div className="achievement-card__icon">
                        {achievement.isHidden && !achievement.isUnlocked ? '‚ùì' : achievement.icon}
                    </div>
                    <div className="achievement-card__info">
                        <div className="achievement-card__header">
                            <div className="achievement-card__name">{displayName}</div>
                            <div className={`achievement-card__rarity ${getRarityClassName(achievement.rarity)}`}>
                                {achievement.rarity}
                            </div>
                        </div>
                        <div className="achievement-card__description">
                            {displayDescription}
                        </div>
                        {renderProgressBar(achievement)}
                    </div>
                </div>
                {achievement.isUnlocked && achievement.unlockedDate && (
                    <div className="achievement-card__date">
                        {formatDate(achievement.unlockedDate)}
                    </div>
                )}
            </div>
        );
    };

    return (
        <div className="achievements-window">
            <div className="achievements-window__header">
                <div className="achievements-window__title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div>
                <div className="achievements-window__stats">
                    <div className="achievements-window__counter">
                        <div className="achievements-window__counter-number">{stats.unlocked}</div>
                        <div className="achievements-window__counter-label">–ü–æ–ª—É—á–µ–Ω–æ</div>
                    </div>
                    <div className="achievements-window__counter">
                        <div className="achievements-window__counter-number">{stats.total}</div>
                        <div className="achievements-window__counter-label">–í—Å–µ–≥–æ</div>
                    </div>
                </div>
                <div className="achievements-window__close" onClick={onClose}>
                    <X size={16} />
                </div>
            </div>

            <div className="achievements-window__body">
                <div className="achievements-window__sidebar">
                    {categories.map(category => {
                        const categoryCount = stats.categoryStats.find(s => s.id === category.id)?.count || 0;

                        return (
                            <div
                                key={category.id}
                                className={`achievement-category ${
                                    activeCategory === category.id ? 'achievement-category--active' : ''
                                }`}
                                onClick={() => setActiveCategory(category.id)}
                            >
                                {category.icon} {category.name}
                                {categoryCount > 0 && (
                                    <div className="achievement-category__badge">
                                        {categoryCount}
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>

                <div className="achievements-window__content">
                    {filteredAchievements.length > 0 ? (
                        <div className="achievements-window__grid">
                            {filteredAchievements.map(achievement => renderAchievementCard(achievement))}
                        </div>
                    ) : (
                        <div className="achievements-empty">
                            <div className="achievements-empty__icon">üèÜ</div>
                            <div className="achievements-empty__text">
                                –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default AchievementsWindow;